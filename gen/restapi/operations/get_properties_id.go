// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/Sutheres/property-service/internal/auth"
	middleware "github.com/go-openapi/runtime/middleware"
)

// GetPropertiesIDHandlerFunc turns a function with the right signature into a get properties ID handler
type GetPropertiesIDHandlerFunc func(GetPropertiesIDParams, *auth.AuthUser) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPropertiesIDHandlerFunc) Handle(params GetPropertiesIDParams, principal *auth.AuthUser) middleware.Responder {
	return fn(params, principal)
}

// GetPropertiesIDHandler interface for that can handle valid get properties ID params
type GetPropertiesIDHandler interface {
	Handle(GetPropertiesIDParams, *auth.AuthUser) middleware.Responder
}

// NewGetPropertiesID creates a new http.Handler for the get properties ID operation
func NewGetPropertiesID(ctx *middleware.Context, handler GetPropertiesIDHandler) *GetPropertiesID {
	return &GetPropertiesID{Context: ctx, Handler: handler}
}

/*GetPropertiesID swagger:route GET /properties/{id} getPropertiesId

Gets a property by id.

*/
type GetPropertiesID struct {
	Context *middleware.Context
	Handler GetPropertiesIDHandler
}

func (o *GetPropertiesID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetPropertiesIDParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *auth.AuthUser
	if uprinc != nil {
		principal = uprinc.(*auth.AuthUser) // this is really a auth.AuthUser, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
