// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Property property
// swagger:model property
type Property struct {

	// bathrooms
	Bathrooms float32 `json:"bathrooms,omitempty"`

	// bedrooms
	Bedrooms float32 `json:"bedrooms,omitempty"`

	// city
	// Min Length: 1
	City string `json:"city,omitempty"`

	// price
	// Min Length: 1
	Price string `json:"price,omitempty"`

	// property id
	// Min Length: 1
	PropertyID string `json:"property_id,omitempty"`

	// property type
	// Min Length: 1
	PropertyType string `json:"property_type,omitempty"`

	// real estate type
	// Min Length: 1
	RealEstateType string `json:"real_estate_type,omitempty"`

	// state
	// Min Length: 1
	State string `json:"state,omitempty"`

	// street
	// Min Length: 1
	Street string `json:"street,omitempty"`

	// street number
	// Min Length: 1
	StreetNumber string `json:"street_number,omitempty"`

	// street suffix
	// Min Length: 1
	StreetSuffix string `json:"street_suffix,omitempty"`

	// zip
	// Min Length: 1
	Zip string `json:"zip,omitempty"`
}

// Validate validates this property
func (m *Property) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealEstateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreetSuffix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateZip(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Property) validateCity(formats strfmt.Registry) error {

	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := validate.MinLength("city", "body", string(m.City), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validatePrice(formats strfmt.Registry) error {

	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if err := validate.MinLength("price", "body", string(m.Price), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validatePropertyID(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyID) { // not required
		return nil
	}

	if err := validate.MinLength("property_id", "body", string(m.PropertyID), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validatePropertyType(formats strfmt.Registry) error {

	if swag.IsZero(m.PropertyType) { // not required
		return nil
	}

	if err := validate.MinLength("property_type", "body", string(m.PropertyType), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validateRealEstateType(formats strfmt.Registry) error {

	if swag.IsZero(m.RealEstateType) { // not required
		return nil
	}

	if err := validate.MinLength("real_estate_type", "body", string(m.RealEstateType), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := validate.MinLength("state", "body", string(m.State), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validateStreet(formats strfmt.Registry) error {

	if swag.IsZero(m.Street) { // not required
		return nil
	}

	if err := validate.MinLength("street", "body", string(m.Street), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validateStreetNumber(formats strfmt.Registry) error {

	if swag.IsZero(m.StreetNumber) { // not required
		return nil
	}

	if err := validate.MinLength("street_number", "body", string(m.StreetNumber), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validateStreetSuffix(formats strfmt.Registry) error {

	if swag.IsZero(m.StreetSuffix) { // not required
		return nil
	}

	if err := validate.MinLength("street_suffix", "body", string(m.StreetSuffix), 1); err != nil {
		return err
	}

	return nil
}

func (m *Property) validateZip(formats strfmt.Registry) error {

	if swag.IsZero(m.Zip) { // not required
		return nil
	}

	if err := validate.MinLength("zip", "body", string(m.Zip), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Property) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Property) UnmarshalBinary(b []byte) error {
	var res Property
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
